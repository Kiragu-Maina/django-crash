"""
Django settings for crashsite project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
import cloudinary
import redis
import hiredis

from pathlib import Path




location = lambda x: os.path.join(
    os.path.dirname(os.path.realpath(__file__)), x)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/


SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ["*"]


# Retrieve the value of TRUSTED_ORIGINS from the environment variable
TRUSTED_ORIGINS = os.environ.get('TRUSTED_ORIGINS')

# Split the comma-separated string into a list of origins
CSRF_TRUSTED_ORIGINS =  [f"{TRUSTED_ORIGINS}"]

# CSRF_TRUSTED_ORIGINS = ["https://django-crash-testing.up.railway.app"]


CORS_ALLOW_ALL_ORIGINS = False

# FORM SUBMISSION
# Comment out the following line and place your railway URL, and your production URL in the array.
# CSRF_TRUSTED_ORIGINS = ["*"]

# Application definition


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "whitenoise.runserver_nostatic",
    'crash',
    "corsheaders",
     "cloudinary_storage",
    "cloudinary", 
    'channels',
    
    'django_celery_beat',
    

    
    
]

SITE_ID = 1

cloudinary.config(
    cloud_name="dzac7jcg9",
    api_key="298999595751521",
    api_secret="WKPLJLG6puJyJyocjXq-_aJqprg",
    
)

CLOUDINARY_STORAGE = {
    "CLOUD_NAME": "dzac7jcg9",
    "API_KEY": "298999595751521",
    "API_SECRET": "WKPLJLG6puJyJyocjXq-_aJqprg",
    
}


MIDDLEWARE = [
    'django.middleware.gzip.GZipMiddleware',
    
    'django_grip.GripMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    
    
]

ROOT_URLCONF = 'crashsite.urls'
REDIS_URL = os.environ["REDIS_URL"]

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"{REDIS_URL}",
        
    }
}
CELERY_BROKER_URL =  f"{REDIS_URL}"
CELERY_RESULT_BACKEND =  f"{REDIS_URL}"
AUTH_USER_MODEL = 'crash.User'
# CACHES = {
#     "default": {
#         "BACKEND": "django_redis.cache.RedisCache",
#         "LOCATION": "redis://127.0.0.1:6379/1",
#         },
#         }
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "WARNING",
    },
     "loggers": {
        "django": {
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
            "propagate": False,
        },
    },
}


SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = "default"
SESSION_COOKIE_HTTPONLY = True
LOGIN_URL = '/login/'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [

                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                
            ],
        },
    },
]
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

# PIPELINE = {
#     'PIPELINE_ENABLED': True,
#     'PIPELINE_COLLECTOR_ENABLED':True,
    
#     'JAVASCRIPT': {
#         'scripts': {
#             'source_filenames': (
#               'js/adminupdates.js',
#               'js/argon-dashboard.js',
#               'js/betplacement.js',
#               'js/darkenbody.js',
#               'js/loginregister.js',
              
#               'js/main.js',
#                'js/phaserfourballoons.js',
#               'js/updatehtml.js',
              
#               'js/phaserconfig.js'
#               'js/newphaser.js',
              
             
#             ),
#             'output_filename': 'js/scripts.js',
#         }
#     }
# }

# PIPELINE.update({
#     'CLOSURE_BINARY': os.path.join(BASE_DIR, 'closure-compiler.sh'),
# })
# PIPELINE['JS_COMPRESSOR'] = 'pipeline.compressors.closure.ClosureCompressor'





ASGI_APPLICATION = 'crashsite.asgi.application'
WSGI_APPLICATION = 'crashsite.wsgi.application'


CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
           "hosts": [f"{REDIS_URL}/0"],
            
        },
    },
}



# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ["PGDATABASE"],
        'USER': os.environ["PGUSER"],
        'PASSWORD': os.environ["PGPASSWORD"],
        'HOST': os.environ["PGHOST"],
        'PORT': os.environ["PGPORT"],
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'
MEDIA_URL = 'media/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

MEDIA_ROOT = os.path.join(BASE_DIR, "media")


STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder'
    
)
